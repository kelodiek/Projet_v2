#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.34209
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace frmParent
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BD_LEGO_ELODIE")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Définitions de méthodes d'extensibilité
    partial void OnCreated();
    partial void Insertcolors(colors instance);
    partial void Updatecolors(colors instance);
    partial void Deletecolors(colors instance);
    partial void Insertmessages(messages instance);
    partial void Updatemessages(messages instance);
    partial void Deletemessages(messages instance);
    partial void Insertpieces(pieces instance);
    partial void Updatepieces(pieces instance);
    partial void Deletepieces(pieces instance);
    partial void Insertpieces_users(pieces_users instance);
    partial void Updatepieces_users(pieces_users instance);
    partial void Deletepieces_users(pieces_users instance);
    partial void Insertsets(sets instance);
    partial void Updatesets(sets instance);
    partial void Deletesets(sets instance);
    partial void Insertsets_pieces(sets_pieces instance);
    partial void Updatesets_pieces(sets_pieces instance);
    partial void Deletesets_pieces(sets_pieces instance);
    partial void Insertsets_users(sets_users instance);
    partial void Updatesets_users(sets_users instance);
    partial void Deletesets_users(sets_users instance);
    partial void Insertusers(users instance);
    partial void Updateusers(users instance);
    partial void Deleteusers(users instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::frmParent.Properties.Settings.Default.BD_LEGO_ELODIEConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<colors> colors
		{
			get
			{
				return this.GetTable<colors>();
			}
		}
		
		public System.Data.Linq.Table<messages> messages
		{
			get
			{
				return this.GetTable<messages>();
			}
		}
		
		public System.Data.Linq.Table<pieces> pieces
		{
			get
			{
				return this.GetTable<pieces>();
			}
		}
		
		public System.Data.Linq.Table<pieces_users> pieces_users
		{
			get
			{
				return this.GetTable<pieces_users>();
			}
		}
		
		public System.Data.Linq.Table<sets> sets
		{
			get
			{
				return this.GetTable<sets>();
			}
		}
		
		public System.Data.Linq.Table<sets_pieces> sets_pieces
		{
			get
			{
				return this.GetTable<sets_pieces>();
			}
		}
		
		public System.Data.Linq.Table<sets_users> sets_users
		{
			get
			{
				return this.GetTable<sets_users>();
			}
		}
		
		public System.Data.Linq.Table<users> users
		{
			get
			{
				return this.GetTable<users>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.colors")]
	public partial class colors : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _descr;
		
		private EntitySet<sets_pieces> _sets_pieces;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OndescrChanging(string value);
    partial void OndescrChanged();
    #endregion
		
		public colors()
		{
			this._sets_pieces = new EntitySet<sets_pieces>(new Action<sets_pieces>(this.attach_sets_pieces), new Action<sets_pieces>(this.detach_sets_pieces));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_descr", DbType="VarChar(250)")]
		public string descr
		{
			get
			{
				return this._descr;
			}
			set
			{
				if ((this._descr != value))
				{
					this.OndescrChanging(value);
					this.SendPropertyChanging();
					this._descr = value;
					this.SendPropertyChanged("descr");
					this.OndescrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="colors_sets_pieces", Storage="_sets_pieces", ThisKey="id", OtherKey="color")]
		public EntitySet<sets_pieces> sets_pieces
		{
			get
			{
				return this._sets_pieces;
			}
			set
			{
				this._sets_pieces.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_sets_pieces(sets_pieces entity)
		{
			this.SendPropertyChanging();
			entity.colors = this;
		}
		
		private void detach_sets_pieces(sets_pieces entity)
		{
			this.SendPropertyChanging();
			entity.colors = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.messages")]
	public partial class messages : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _message_id;
		
		private System.Nullable<int> _addresser;
		
		private string _receiver;
		
		private string _sets_id;
		
		private string _message;
		
		private string _state;
		
		private EntityRef<sets> _sets;
		
		private EntityRef<users> _users;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onmessage_idChanging(string value);
    partial void Onmessage_idChanged();
    partial void OnaddresserChanging(System.Nullable<int> value);
    partial void OnaddresserChanged();
    partial void OnreceiverChanging(string value);
    partial void OnreceiverChanged();
    partial void Onsets_idChanging(string value);
    partial void Onsets_idChanged();
    partial void OnmessageChanging(string value);
    partial void OnmessageChanged();
    partial void OnstateChanging(string value);
    partial void OnstateChanged();
    #endregion
		
		public messages()
		{
			this._sets = default(EntityRef<sets>);
			this._users = default(EntityRef<users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_message_id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string message_id
		{
			get
			{
				return this._message_id;
			}
			set
			{
				if ((this._message_id != value))
				{
					this.Onmessage_idChanging(value);
					this.SendPropertyChanging();
					this._message_id = value;
					this.SendPropertyChanged("message_id");
					this.Onmessage_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_addresser", DbType="Int")]
		public System.Nullable<int> addresser
		{
			get
			{
				return this._addresser;
			}
			set
			{
				if ((this._addresser != value))
				{
					if (this._users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnaddresserChanging(value);
					this.SendPropertyChanging();
					this._addresser = value;
					this.SendPropertyChanged("addresser");
					this.OnaddresserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_receiver", DbType="VarChar(50)")]
		public string receiver
		{
			get
			{
				return this._receiver;
			}
			set
			{
				if ((this._receiver != value))
				{
					this.OnreceiverChanging(value);
					this.SendPropertyChanging();
					this._receiver = value;
					this.SendPropertyChanged("receiver");
					this.OnreceiverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sets_id", DbType="VarChar(50)")]
		public string sets_id
		{
			get
			{
				return this._sets_id;
			}
			set
			{
				if ((this._sets_id != value))
				{
					if (this._sets.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsets_idChanging(value);
					this.SendPropertyChanging();
					this._sets_id = value;
					this.SendPropertyChanged("sets_id");
					this.Onsets_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_message", DbType="VarChar(250)")]
		public string message
		{
			get
			{
				return this._message;
			}
			set
			{
				if ((this._message != value))
				{
					this.OnmessageChanging(value);
					this.SendPropertyChanging();
					this._message = value;
					this.SendPropertyChanged("message");
					this.OnmessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_state", DbType="VarChar(50)")]
		public string state
		{
			get
			{
				return this._state;
			}
			set
			{
				if ((this._state != value))
				{
					this.OnstateChanging(value);
					this.SendPropertyChanging();
					this._state = value;
					this.SendPropertyChanged("state");
					this.OnstateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sets_messages", Storage="_sets", ThisKey="sets_id", OtherKey="sets_id", IsForeignKey=true)]
		public sets sets
		{
			get
			{
				return this._sets.Entity;
			}
			set
			{
				sets previousValue = this._sets.Entity;
				if (((previousValue != value) 
							|| (this._sets.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sets.Entity = null;
						previousValue.messages.Remove(this);
					}
					this._sets.Entity = value;
					if ((value != null))
					{
						value.messages.Add(this);
						this._sets_id = value.sets_id;
					}
					else
					{
						this._sets_id = default(string);
					}
					this.SendPropertyChanged("sets");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="users_messages", Storage="_users", ThisKey="addresser", OtherKey="user_id", IsForeignKey=true)]
		public users users
		{
			get
			{
				return this._users.Entity;
			}
			set
			{
				users previousValue = this._users.Entity;
				if (((previousValue != value) 
							|| (this._users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._users.Entity = null;
						previousValue.messages.Remove(this);
					}
					this._users.Entity = value;
					if ((value != null))
					{
						value.messages.Add(this);
						this._addresser = value.user_id;
					}
					else
					{
						this._addresser = default(Nullable<int>);
					}
					this.SendPropertyChanged("users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.pieces")]
	public partial class pieces : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _piece_id;
		
		private string _descr;
		
		private string _category;
		
		private EntitySet<pieces_users> _pieces_users;
		
		private EntitySet<sets_pieces> _sets_pieces;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onpiece_idChanging(string value);
    partial void Onpiece_idChanged();
    partial void OndescrChanging(string value);
    partial void OndescrChanged();
    partial void OncategoryChanging(string value);
    partial void OncategoryChanged();
    #endregion
		
		public pieces()
		{
			this._pieces_users = new EntitySet<pieces_users>(new Action<pieces_users>(this.attach_pieces_users), new Action<pieces_users>(this.detach_pieces_users));
			this._sets_pieces = new EntitySet<sets_pieces>(new Action<sets_pieces>(this.attach_sets_pieces), new Action<sets_pieces>(this.detach_sets_pieces));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_piece_id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string piece_id
		{
			get
			{
				return this._piece_id;
			}
			set
			{
				if ((this._piece_id != value))
				{
					this.Onpiece_idChanging(value);
					this.SendPropertyChanging();
					this._piece_id = value;
					this.SendPropertyChanged("piece_id");
					this.Onpiece_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_descr", DbType="VarChar(250)")]
		public string descr
		{
			get
			{
				return this._descr;
			}
			set
			{
				if ((this._descr != value))
				{
					this.OndescrChanging(value);
					this.SendPropertyChanging();
					this._descr = value;
					this.SendPropertyChanged("descr");
					this.OndescrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_category", DbType="VarChar(250)")]
		public string category
		{
			get
			{
				return this._category;
			}
			set
			{
				if ((this._category != value))
				{
					this.OncategoryChanging(value);
					this.SendPropertyChanging();
					this._category = value;
					this.SendPropertyChanged("category");
					this.OncategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="pieces_pieces_users", Storage="_pieces_users", ThisKey="piece_id", OtherKey="pieces_id")]
		public EntitySet<pieces_users> pieces_users
		{
			get
			{
				return this._pieces_users;
			}
			set
			{
				this._pieces_users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="pieces_sets_pieces", Storage="_sets_pieces", ThisKey="piece_id", OtherKey="piece_id")]
		public EntitySet<sets_pieces> sets_pieces
		{
			get
			{
				return this._sets_pieces;
			}
			set
			{
				this._sets_pieces.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_pieces_users(pieces_users entity)
		{
			this.SendPropertyChanging();
			entity.pieces = this;
		}
		
		private void detach_pieces_users(pieces_users entity)
		{
			this.SendPropertyChanging();
			entity.pieces = null;
		}
		
		private void attach_sets_pieces(sets_pieces entity)
		{
			this.SendPropertyChanging();
			entity.pieces = this;
		}
		
		private void detach_sets_pieces(sets_pieces entity)
		{
			this.SendPropertyChanging();
			entity.pieces = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.pieces_users")]
	public partial class pieces_users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _users_id;
		
		private string _pieces_id;
		
		private int _qte;
		
		private int _color;
		
		private EntityRef<pieces> _pieces;
		
		private EntityRef<users> _users;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onusers_idChanging(int value);
    partial void Onusers_idChanged();
    partial void Onpieces_idChanging(string value);
    partial void Onpieces_idChanged();
    partial void OnqteChanging(int value);
    partial void OnqteChanged();
    partial void OncolorChanging(int value);
    partial void OncolorChanged();
    #endregion
		
		public pieces_users()
		{
			this._pieces = default(EntityRef<pieces>);
			this._users = default(EntityRef<users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_users_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int users_id
		{
			get
			{
				return this._users_id;
			}
			set
			{
				if ((this._users_id != value))
				{
					if (this._users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onusers_idChanging(value);
					this.SendPropertyChanging();
					this._users_id = value;
					this.SendPropertyChanged("users_id");
					this.Onusers_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pieces_id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string pieces_id
		{
			get
			{
				return this._pieces_id;
			}
			set
			{
				if ((this._pieces_id != value))
				{
					if (this._pieces.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onpieces_idChanging(value);
					this.SendPropertyChanging();
					this._pieces_id = value;
					this.SendPropertyChanged("pieces_id");
					this.Onpieces_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_qte", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int qte
		{
			get
			{
				return this._qte;
			}
			set
			{
				if ((this._qte != value))
				{
					this.OnqteChanging(value);
					this.SendPropertyChanging();
					this._qte = value;
					this.SendPropertyChanged("qte");
					this.OnqteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_color", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int color
		{
			get
			{
				return this._color;
			}
			set
			{
				if ((this._color != value))
				{
					this.OncolorChanging(value);
					this.SendPropertyChanging();
					this._color = value;
					this.SendPropertyChanged("color");
					this.OncolorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="pieces_pieces_users", Storage="_pieces", ThisKey="pieces_id", OtherKey="piece_id", IsForeignKey=true)]
		public pieces pieces
		{
			get
			{
				return this._pieces.Entity;
			}
			set
			{
				pieces previousValue = this._pieces.Entity;
				if (((previousValue != value) 
							|| (this._pieces.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._pieces.Entity = null;
						previousValue.pieces_users.Remove(this);
					}
					this._pieces.Entity = value;
					if ((value != null))
					{
						value.pieces_users.Add(this);
						this._pieces_id = value.piece_id;
					}
					else
					{
						this._pieces_id = default(string);
					}
					this.SendPropertyChanged("pieces");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="users_pieces_users", Storage="_users", ThisKey="users_id", OtherKey="user_id", IsForeignKey=true)]
		public users users
		{
			get
			{
				return this._users.Entity;
			}
			set
			{
				users previousValue = this._users.Entity;
				if (((previousValue != value) 
							|| (this._users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._users.Entity = null;
						previousValue.pieces_users.Remove(this);
					}
					this._users.Entity = value;
					if ((value != null))
					{
						value.pieces_users.Add(this);
						this._users_id = value.user_id;
					}
					else
					{
						this._users_id = default(int);
					}
					this.SendPropertyChanged("users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.sets")]
	public partial class sets : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _sets_id;
		
		private string _year;
		
		private string _pieces;
		
		private string _t1;
		
		private string _descr;
		
		private EntitySet<messages> _messages;
		
		private EntitySet<sets_pieces> _sets_pieces;
		
		private EntitySet<sets_users> _sets_users;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onsets_idChanging(string value);
    partial void Onsets_idChanged();
    partial void OnyearChanging(string value);
    partial void OnyearChanged();
    partial void OnpiecesChanging(string value);
    partial void OnpiecesChanged();
    partial void Ont1Changing(string value);
    partial void Ont1Changed();
    partial void OndescrChanging(string value);
    partial void OndescrChanged();
    #endregion
		
		public sets()
		{
			this._messages = new EntitySet<messages>(new Action<messages>(this.attach_messages), new Action<messages>(this.detach_messages));
			this._sets_pieces = new EntitySet<sets_pieces>(new Action<sets_pieces>(this.attach_sets_pieces), new Action<sets_pieces>(this.detach_sets_pieces));
			this._sets_users = new EntitySet<sets_users>(new Action<sets_users>(this.attach_sets_users), new Action<sets_users>(this.detach_sets_users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sets_id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string sets_id
		{
			get
			{
				return this._sets_id;
			}
			set
			{
				if ((this._sets_id != value))
				{
					this.Onsets_idChanging(value);
					this.SendPropertyChanging();
					this._sets_id = value;
					this.SendPropertyChanged("sets_id");
					this.Onsets_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_year", DbType="VarChar(50)")]
		public string year
		{
			get
			{
				return this._year;
			}
			set
			{
				if ((this._year != value))
				{
					this.OnyearChanging(value);
					this.SendPropertyChanging();
					this._year = value;
					this.SendPropertyChanged("year");
					this.OnyearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pieces", DbType="VarChar(50)")]
		public string pieces
		{
			get
			{
				return this._pieces;
			}
			set
			{
				if ((this._pieces != value))
				{
					this.OnpiecesChanging(value);
					this.SendPropertyChanging();
					this._pieces = value;
					this.SendPropertyChanged("pieces");
					this.OnpiecesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_t1", DbType="VarChar(250)")]
		public string t1
		{
			get
			{
				return this._t1;
			}
			set
			{
				if ((this._t1 != value))
				{
					this.Ont1Changing(value);
					this.SendPropertyChanging();
					this._t1 = value;
					this.SendPropertyChanged("t1");
					this.Ont1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_descr", DbType="VarChar(250)")]
		public string descr
		{
			get
			{
				return this._descr;
			}
			set
			{
				if ((this._descr != value))
				{
					this.OndescrChanging(value);
					this.SendPropertyChanging();
					this._descr = value;
					this.SendPropertyChanged("descr");
					this.OndescrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sets_messages", Storage="_messages", ThisKey="sets_id", OtherKey="sets_id")]
		public EntitySet<messages> messages
		{
			get
			{
				return this._messages;
			}
			set
			{
				this._messages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sets_sets_pieces", Storage="_sets_pieces", ThisKey="sets_id", OtherKey="sets_id")]
		public EntitySet<sets_pieces> sets_pieces
		{
			get
			{
				return this._sets_pieces;
			}
			set
			{
				this._sets_pieces.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sets_sets_users", Storage="_sets_users", ThisKey="sets_id", OtherKey="sets_id")]
		public EntitySet<sets_users> sets_users
		{
			get
			{
				return this._sets_users;
			}
			set
			{
				this._sets_users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_messages(messages entity)
		{
			this.SendPropertyChanging();
			entity.sets = this;
		}
		
		private void detach_messages(messages entity)
		{
			this.SendPropertyChanging();
			entity.sets = null;
		}
		
		private void attach_sets_pieces(sets_pieces entity)
		{
			this.SendPropertyChanging();
			entity.sets = this;
		}
		
		private void detach_sets_pieces(sets_pieces entity)
		{
			this.SendPropertyChanging();
			entity.sets = null;
		}
		
		private void attach_sets_users(sets_users entity)
		{
			this.SendPropertyChanging();
			entity.sets = this;
		}
		
		private void detach_sets_users(sets_users entity)
		{
			this.SendPropertyChanging();
			entity.sets = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.sets_pieces")]
	public partial class sets_pieces : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _sets_id;
		
		private string _piece_id;
		
		private int _num;
		
		private int _color;
		
		private int _type;
		
		private int _sets_piece_id;
		
		private EntityRef<colors> _colors;
		
		private EntityRef<pieces> _pieces;
		
		private EntityRef<sets> _sets;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onsets_idChanging(string value);
    partial void Onsets_idChanged();
    partial void Onpiece_idChanging(string value);
    partial void Onpiece_idChanged();
    partial void OnnumChanging(int value);
    partial void OnnumChanged();
    partial void OncolorChanging(int value);
    partial void OncolorChanged();
    partial void OntypeChanging(int value);
    partial void OntypeChanged();
    partial void Onsets_piece_idChanging(int value);
    partial void Onsets_piece_idChanged();
    #endregion
		
		public sets_pieces()
		{
			this._colors = default(EntityRef<colors>);
			this._pieces = default(EntityRef<pieces>);
			this._sets = default(EntityRef<sets>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sets_id", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string sets_id
		{
			get
			{
				return this._sets_id;
			}
			set
			{
				if ((this._sets_id != value))
				{
					if (this._sets.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsets_idChanging(value);
					this.SendPropertyChanging();
					this._sets_id = value;
					this.SendPropertyChanged("sets_id");
					this.Onsets_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_piece_id", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string piece_id
		{
			get
			{
				return this._piece_id;
			}
			set
			{
				if ((this._piece_id != value))
				{
					if (this._pieces.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onpiece_idChanging(value);
					this.SendPropertyChanging();
					this._piece_id = value;
					this.SendPropertyChanged("piece_id");
					this.Onpiece_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_num", DbType="Int NOT NULL")]
		public int num
		{
			get
			{
				return this._num;
			}
			set
			{
				if ((this._num != value))
				{
					this.OnnumChanging(value);
					this.SendPropertyChanging();
					this._num = value;
					this.SendPropertyChanged("num");
					this.OnnumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_color", DbType="Int NOT NULL")]
		public int color
		{
			get
			{
				return this._color;
			}
			set
			{
				if ((this._color != value))
				{
					if (this._colors.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncolorChanging(value);
					this.SendPropertyChanging();
					this._color = value;
					this.SendPropertyChanged("color");
					this.OncolorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="Int NOT NULL")]
		public int type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sets_piece_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int sets_piece_id
		{
			get
			{
				return this._sets_piece_id;
			}
			set
			{
				if ((this._sets_piece_id != value))
				{
					this.Onsets_piece_idChanging(value);
					this.SendPropertyChanging();
					this._sets_piece_id = value;
					this.SendPropertyChanged("sets_piece_id");
					this.Onsets_piece_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="colors_sets_pieces", Storage="_colors", ThisKey="color", OtherKey="id", IsForeignKey=true)]
		public colors colors
		{
			get
			{
				return this._colors.Entity;
			}
			set
			{
				colors previousValue = this._colors.Entity;
				if (((previousValue != value) 
							|| (this._colors.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._colors.Entity = null;
						previousValue.sets_pieces.Remove(this);
					}
					this._colors.Entity = value;
					if ((value != null))
					{
						value.sets_pieces.Add(this);
						this._color = value.id;
					}
					else
					{
						this._color = default(int);
					}
					this.SendPropertyChanged("colors");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="pieces_sets_pieces", Storage="_pieces", ThisKey="piece_id", OtherKey="piece_id", IsForeignKey=true)]
		public pieces pieces
		{
			get
			{
				return this._pieces.Entity;
			}
			set
			{
				pieces previousValue = this._pieces.Entity;
				if (((previousValue != value) 
							|| (this._pieces.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._pieces.Entity = null;
						previousValue.sets_pieces.Remove(this);
					}
					this._pieces.Entity = value;
					if ((value != null))
					{
						value.sets_pieces.Add(this);
						this._piece_id = value.piece_id;
					}
					else
					{
						this._piece_id = default(string);
					}
					this.SendPropertyChanged("pieces");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sets_sets_pieces", Storage="_sets", ThisKey="sets_id", OtherKey="sets_id", IsForeignKey=true)]
		public sets sets
		{
			get
			{
				return this._sets.Entity;
			}
			set
			{
				sets previousValue = this._sets.Entity;
				if (((previousValue != value) 
							|| (this._sets.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sets.Entity = null;
						previousValue.sets_pieces.Remove(this);
					}
					this._sets.Entity = value;
					if ((value != null))
					{
						value.sets_pieces.Add(this);
						this._sets_id = value.sets_id;
					}
					else
					{
						this._sets_id = default(string);
					}
					this.SendPropertyChanged("sets");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.sets_users")]
	public partial class sets_users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _sets_id;
		
		private int _user_id;
		
		private string _state;
		
		private EntityRef<sets> _sets;
		
		private EntityRef<users> _users;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onsets_idChanging(string value);
    partial void Onsets_idChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void OnstateChanging(string value);
    partial void OnstateChanged();
    #endregion
		
		public sets_users()
		{
			this._sets = default(EntityRef<sets>);
			this._users = default(EntityRef<users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sets_id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string sets_id
		{
			get
			{
				return this._sets_id;
			}
			set
			{
				if ((this._sets_id != value))
				{
					if (this._sets.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsets_idChanging(value);
					this.SendPropertyChanging();
					this._sets_id = value;
					this.SendPropertyChanged("sets_id");
					this.Onsets_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_state", DbType="VarChar(50)")]
		public string state
		{
			get
			{
				return this._state;
			}
			set
			{
				if ((this._state != value))
				{
					this.OnstateChanging(value);
					this.SendPropertyChanging();
					this._state = value;
					this.SendPropertyChanged("state");
					this.OnstateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sets_sets_users", Storage="_sets", ThisKey="sets_id", OtherKey="sets_id", IsForeignKey=true)]
		public sets sets
		{
			get
			{
				return this._sets.Entity;
			}
			set
			{
				sets previousValue = this._sets.Entity;
				if (((previousValue != value) 
							|| (this._sets.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sets.Entity = null;
						previousValue.sets_users.Remove(this);
					}
					this._sets.Entity = value;
					if ((value != null))
					{
						value.sets_users.Add(this);
						this._sets_id = value.sets_id;
					}
					else
					{
						this._sets_id = default(string);
					}
					this.SendPropertyChanged("sets");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="users_sets_users", Storage="_users", ThisKey="user_id", OtherKey="user_id", IsForeignKey=true)]
		public users users
		{
			get
			{
				return this._users.Entity;
			}
			set
			{
				users previousValue = this._users.Entity;
				if (((previousValue != value) 
							|| (this._users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._users.Entity = null;
						previousValue.sets_users.Remove(this);
					}
					this._users.Entity = value;
					if ((value != null))
					{
						value.sets_users.Add(this);
						this._user_id = value.user_id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.users")]
	public partial class users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _user_id;
		
		private string _username;
		
		private string _password;
		
		private string _role;
		
		private string _email;
		
		private EntitySet<messages> _messages;
		
		private EntitySet<pieces_users> _pieces_users;
		
		private EntitySet<sets_users> _sets_users;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnroleChanging(string value);
    partial void OnroleChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    #endregion
		
		public users()
		{
			this._messages = new EntitySet<messages>(new Action<messages>(this.attach_messages), new Action<messages>(this.detach_messages));
			this._pieces_users = new EntitySet<pieces_users>(new Action<pieces_users>(this.attach_pieces_users), new Action<pieces_users>(this.detach_pieces_users));
			this._sets_users = new EntitySet<sets_users>(new Action<sets_users>(this.attach_sets_users), new Action<sets_users>(this.detach_sets_users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_role", DbType="VarChar(50)")]
		public string role
		{
			get
			{
				return this._role;
			}
			set
			{
				if ((this._role != value))
				{
					this.OnroleChanging(value);
					this.SendPropertyChanging();
					this._role = value;
					this.SendPropertyChanged("role");
					this.OnroleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(250)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="users_messages", Storage="_messages", ThisKey="user_id", OtherKey="addresser")]
		public EntitySet<messages> messages
		{
			get
			{
				return this._messages;
			}
			set
			{
				this._messages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="users_pieces_users", Storage="_pieces_users", ThisKey="user_id", OtherKey="users_id")]
		public EntitySet<pieces_users> pieces_users
		{
			get
			{
				return this._pieces_users;
			}
			set
			{
				this._pieces_users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="users_sets_users", Storage="_sets_users", ThisKey="user_id", OtherKey="user_id")]
		public EntitySet<sets_users> sets_users
		{
			get
			{
				return this._sets_users;
			}
			set
			{
				this._sets_users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_messages(messages entity)
		{
			this.SendPropertyChanging();
			entity.users = this;
		}
		
		private void detach_messages(messages entity)
		{
			this.SendPropertyChanging();
			entity.users = null;
		}
		
		private void attach_pieces_users(pieces_users entity)
		{
			this.SendPropertyChanging();
			entity.users = this;
		}
		
		private void detach_pieces_users(pieces_users entity)
		{
			this.SendPropertyChanging();
			entity.users = null;
		}
		
		private void attach_sets_users(sets_users entity)
		{
			this.SendPropertyChanging();
			entity.users = this;
		}
		
		private void detach_sets_users(sets_users entity)
		{
			this.SendPropertyChanging();
			entity.users = null;
		}
	}
}
#pragma warning restore 1591
